/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileIO_H
#define FileIO_H

#include <thrift/TDispatchProcessor.h>
#include "Client2Chunk_types.h"

namespace GFS {

class FileIOIf {
 public:
  virtual ~FileIOIf() {}
  virtual int64_t write(const int32_t fd, const std::string& buf) = 0;
  virtual void read(ReadResult& _return, const int32_t fd, const int64_t count) = 0;
};

class FileIOIfFactory {
 public:
  typedef FileIOIf Handler;

  virtual ~FileIOIfFactory() {}

  virtual FileIOIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileIOIf* /* handler */) = 0;
};

class FileIOIfSingletonFactory : virtual public FileIOIfFactory {
 public:
  FileIOIfSingletonFactory(const boost::shared_ptr<FileIOIf>& iface) : iface_(iface) {}
  virtual ~FileIOIfSingletonFactory() {}

  virtual FileIOIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileIOIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileIOIf> iface_;
};

class FileIONull : virtual public FileIOIf {
 public:
  virtual ~FileIONull() {}
  int64_t write(const int32_t /* fd */, const std::string& /* buf */) {
    int64_t _return = 0;
    return _return;
  }
  void read(ReadResult& /* _return */, const int32_t /* fd */, const int64_t /* count */) {
    return;
  }
};

typedef struct _FileIO_write_args__isset {
  _FileIO_write_args__isset() : fd(false), buf(false) {}
  bool fd;
  bool buf;
} _FileIO_write_args__isset;

class FileIO_write_args {
 public:

  FileIO_write_args() : fd(0), buf() {
  }

  virtual ~FileIO_write_args() throw() {}

  int32_t fd;
  std::string buf;

  _FileIO_write_args__isset __isset;

  void __set_fd(const int32_t val) {
    fd = val;
  }

  void __set_buf(const std::string& val) {
    buf = val;
  }

  bool operator == (const FileIO_write_args & rhs) const
  {
    if (!(fd == rhs.fd))
      return false;
    if (!(buf == rhs.buf))
      return false;
    return true;
  }
  bool operator != (const FileIO_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileIO_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileIO_write_pargs {
 public:


  virtual ~FileIO_write_pargs() throw() {}

  const int32_t* fd;
  const std::string* buf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileIO_write_result__isset {
  _FileIO_write_result__isset() : success(false) {}
  bool success;
} _FileIO_write_result__isset;

class FileIO_write_result {
 public:

  FileIO_write_result() : success(0) {
  }

  virtual ~FileIO_write_result() throw() {}

  int64_t success;

  _FileIO_write_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const FileIO_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileIO_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileIO_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileIO_write_presult__isset {
  _FileIO_write_presult__isset() : success(false) {}
  bool success;
} _FileIO_write_presult__isset;

class FileIO_write_presult {
 public:


  virtual ~FileIO_write_presult() throw() {}

  int64_t* success;

  _FileIO_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileIO_read_args__isset {
  _FileIO_read_args__isset() : fd(false), count(false) {}
  bool fd;
  bool count;
} _FileIO_read_args__isset;

class FileIO_read_args {
 public:

  FileIO_read_args() : fd(0), count(0) {
  }

  virtual ~FileIO_read_args() throw() {}

  int32_t fd;
  int64_t count;

  _FileIO_read_args__isset __isset;

  void __set_fd(const int32_t val) {
    fd = val;
  }

  void __set_count(const int64_t val) {
    count = val;
  }

  bool operator == (const FileIO_read_args & rhs) const
  {
    if (!(fd == rhs.fd))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const FileIO_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileIO_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileIO_read_pargs {
 public:


  virtual ~FileIO_read_pargs() throw() {}

  const int32_t* fd;
  const int64_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileIO_read_result__isset {
  _FileIO_read_result__isset() : success(false) {}
  bool success;
} _FileIO_read_result__isset;

class FileIO_read_result {
 public:

  FileIO_read_result() {
  }

  virtual ~FileIO_read_result() throw() {}

  ReadResult success;

  _FileIO_read_result__isset __isset;

  void __set_success(const ReadResult& val) {
    success = val;
  }

  bool operator == (const FileIO_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileIO_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileIO_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileIO_read_presult__isset {
  _FileIO_read_presult__isset() : success(false) {}
  bool success;
} _FileIO_read_presult__isset;

class FileIO_read_presult {
 public:


  virtual ~FileIO_read_presult() throw() {}

  ReadResult* success;

  _FileIO_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileIOClient : virtual public FileIOIf {
 public:
  FileIOClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FileIOClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t write(const int32_t fd, const std::string& buf);
  void send_write(const int32_t fd, const std::string& buf);
  int64_t recv_write();
  void read(ReadResult& _return, const int32_t fd, const int64_t count);
  void send_read(const int32_t fd, const int64_t count);
  void recv_read(ReadResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileIOProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FileIOIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileIOProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileIOProcessor(boost::shared_ptr<FileIOIf> iface) :
    iface_(iface) {
    processMap_["write"] = &FileIOProcessor::process_write;
    processMap_["read"] = &FileIOProcessor::process_read;
  }

  virtual ~FileIOProcessor() {}
};

class FileIOProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileIOProcessorFactory(const ::boost::shared_ptr< FileIOIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileIOIfFactory > handlerFactory_;
};

class FileIOMultiface : virtual public FileIOIf {
 public:
  FileIOMultiface(std::vector<boost::shared_ptr<FileIOIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileIOMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileIOIf> > ifaces_;
  FileIOMultiface() {}
  void add(boost::shared_ptr<FileIOIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t write(const int32_t fd, const std::string& buf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(fd, buf);
    }
    return ifaces_[i]->write(fd, buf);
  }

  void read(ReadResult& _return, const int32_t fd, const int64_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, fd, count);
    }
    ifaces_[i]->read(_return, fd, count);
    return;
  }

};

} // namespace

#endif
