/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChunkServerManager_H
#define ChunkServerManager_H

#include <thrift/TDispatchProcessor.h>
#include "Chunk2Master_types.h"

namespace GFS {

class ChunkServerManagerIf {
 public:
  virtual ~ChunkServerManagerIf() {}
  virtual bool registerChunkServer(const std::string& ipAddr, const int64_t availMem) = 0;
  virtual void unregisterChunkServer(const std::string& ipAddr) = 0;
  virtual bool heartBeat(const ChunkServerInfo& info) = 0;
};

class ChunkServerManagerIfFactory {
 public:
  typedef ChunkServerManagerIf Handler;

  virtual ~ChunkServerManagerIfFactory() {}

  virtual ChunkServerManagerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChunkServerManagerIf* /* handler */) = 0;
};

class ChunkServerManagerIfSingletonFactory : virtual public ChunkServerManagerIfFactory {
 public:
  ChunkServerManagerIfSingletonFactory(const boost::shared_ptr<ChunkServerManagerIf>& iface) : iface_(iface) {}
  virtual ~ChunkServerManagerIfSingletonFactory() {}

  virtual ChunkServerManagerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChunkServerManagerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChunkServerManagerIf> iface_;
};

class ChunkServerManagerNull : virtual public ChunkServerManagerIf {
 public:
  virtual ~ChunkServerManagerNull() {}
  bool registerChunkServer(const std::string& /* ipAddr */, const int64_t /* availMem */) {
    bool _return = false;
    return _return;
  }
  void unregisterChunkServer(const std::string& /* ipAddr */) {
    return;
  }
  bool heartBeat(const ChunkServerInfo& /* info */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _ChunkServerManager_registerChunkServer_args__isset {
  _ChunkServerManager_registerChunkServer_args__isset() : ipAddr(false), availMem(false) {}
  bool ipAddr;
  bool availMem;
} _ChunkServerManager_registerChunkServer_args__isset;

class ChunkServerManager_registerChunkServer_args {
 public:

  ChunkServerManager_registerChunkServer_args() : ipAddr(), availMem(0) {
  }

  virtual ~ChunkServerManager_registerChunkServer_args() throw() {}

  std::string ipAddr;
  int64_t availMem;

  _ChunkServerManager_registerChunkServer_args__isset __isset;

  void __set_ipAddr(const std::string& val) {
    ipAddr = val;
  }

  void __set_availMem(const int64_t val) {
    availMem = val;
  }

  bool operator == (const ChunkServerManager_registerChunkServer_args & rhs) const
  {
    if (!(ipAddr == rhs.ipAddr))
      return false;
    if (!(availMem == rhs.availMem))
      return false;
    return true;
  }
  bool operator != (const ChunkServerManager_registerChunkServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkServerManager_registerChunkServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChunkServerManager_registerChunkServer_pargs {
 public:


  virtual ~ChunkServerManager_registerChunkServer_pargs() throw() {}

  const std::string* ipAddr;
  const int64_t* availMem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChunkServerManager_registerChunkServer_result__isset {
  _ChunkServerManager_registerChunkServer_result__isset() : success(false) {}
  bool success;
} _ChunkServerManager_registerChunkServer_result__isset;

class ChunkServerManager_registerChunkServer_result {
 public:

  ChunkServerManager_registerChunkServer_result() : success(0) {
  }

  virtual ~ChunkServerManager_registerChunkServer_result() throw() {}

  bool success;

  _ChunkServerManager_registerChunkServer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ChunkServerManager_registerChunkServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChunkServerManager_registerChunkServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkServerManager_registerChunkServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChunkServerManager_registerChunkServer_presult__isset {
  _ChunkServerManager_registerChunkServer_presult__isset() : success(false) {}
  bool success;
} _ChunkServerManager_registerChunkServer_presult__isset;

class ChunkServerManager_registerChunkServer_presult {
 public:


  virtual ~ChunkServerManager_registerChunkServer_presult() throw() {}

  bool* success;

  _ChunkServerManager_registerChunkServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChunkServerManager_unregisterChunkServer_args__isset {
  _ChunkServerManager_unregisterChunkServer_args__isset() : ipAddr(false) {}
  bool ipAddr;
} _ChunkServerManager_unregisterChunkServer_args__isset;

class ChunkServerManager_unregisterChunkServer_args {
 public:

  ChunkServerManager_unregisterChunkServer_args() : ipAddr() {
  }

  virtual ~ChunkServerManager_unregisterChunkServer_args() throw() {}

  std::string ipAddr;

  _ChunkServerManager_unregisterChunkServer_args__isset __isset;

  void __set_ipAddr(const std::string& val) {
    ipAddr = val;
  }

  bool operator == (const ChunkServerManager_unregisterChunkServer_args & rhs) const
  {
    if (!(ipAddr == rhs.ipAddr))
      return false;
    return true;
  }
  bool operator != (const ChunkServerManager_unregisterChunkServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkServerManager_unregisterChunkServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChunkServerManager_unregisterChunkServer_pargs {
 public:


  virtual ~ChunkServerManager_unregisterChunkServer_pargs() throw() {}

  const std::string* ipAddr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChunkServerManager_heartBeat_args__isset {
  _ChunkServerManager_heartBeat_args__isset() : info(false) {}
  bool info;
} _ChunkServerManager_heartBeat_args__isset;

class ChunkServerManager_heartBeat_args {
 public:

  ChunkServerManager_heartBeat_args() {
  }

  virtual ~ChunkServerManager_heartBeat_args() throw() {}

  ChunkServerInfo info;

  _ChunkServerManager_heartBeat_args__isset __isset;

  void __set_info(const ChunkServerInfo& val) {
    info = val;
  }

  bool operator == (const ChunkServerManager_heartBeat_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const ChunkServerManager_heartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkServerManager_heartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChunkServerManager_heartBeat_pargs {
 public:


  virtual ~ChunkServerManager_heartBeat_pargs() throw() {}

  const ChunkServerInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChunkServerManager_heartBeat_result__isset {
  _ChunkServerManager_heartBeat_result__isset() : success(false) {}
  bool success;
} _ChunkServerManager_heartBeat_result__isset;

class ChunkServerManager_heartBeat_result {
 public:

  ChunkServerManager_heartBeat_result() : success(0) {
  }

  virtual ~ChunkServerManager_heartBeat_result() throw() {}

  bool success;

  _ChunkServerManager_heartBeat_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ChunkServerManager_heartBeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChunkServerManager_heartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkServerManager_heartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChunkServerManager_heartBeat_presult__isset {
  _ChunkServerManager_heartBeat_presult__isset() : success(false) {}
  bool success;
} _ChunkServerManager_heartBeat_presult__isset;

class ChunkServerManager_heartBeat_presult {
 public:


  virtual ~ChunkServerManager_heartBeat_presult() throw() {}

  bool* success;

  _ChunkServerManager_heartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChunkServerManagerClient : virtual public ChunkServerManagerIf {
 public:
  ChunkServerManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChunkServerManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool registerChunkServer(const std::string& ipAddr, const int64_t availMem);
  void send_registerChunkServer(const std::string& ipAddr, const int64_t availMem);
  bool recv_registerChunkServer();
  void unregisterChunkServer(const std::string& ipAddr);
  void send_unregisterChunkServer(const std::string& ipAddr);
  bool heartBeat(const ChunkServerInfo& info);
  void send_heartBeat(const ChunkServerInfo& info);
  bool recv_heartBeat();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChunkServerManagerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChunkServerManagerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChunkServerManagerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerChunkServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregisterChunkServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChunkServerManagerProcessor(boost::shared_ptr<ChunkServerManagerIf> iface) :
    iface_(iface) {
    processMap_["registerChunkServer"] = &ChunkServerManagerProcessor::process_registerChunkServer;
    processMap_["unregisterChunkServer"] = &ChunkServerManagerProcessor::process_unregisterChunkServer;
    processMap_["heartBeat"] = &ChunkServerManagerProcessor::process_heartBeat;
  }

  virtual ~ChunkServerManagerProcessor() {}
};

class ChunkServerManagerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChunkServerManagerProcessorFactory(const ::boost::shared_ptr< ChunkServerManagerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChunkServerManagerIfFactory > handlerFactory_;
};

class ChunkServerManagerMultiface : virtual public ChunkServerManagerIf {
 public:
  ChunkServerManagerMultiface(std::vector<boost::shared_ptr<ChunkServerManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChunkServerManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChunkServerManagerIf> > ifaces_;
  ChunkServerManagerMultiface() {}
  void add(boost::shared_ptr<ChunkServerManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool registerChunkServer(const std::string& ipAddr, const int64_t availMem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerChunkServer(ipAddr, availMem);
    }
    return ifaces_[i]->registerChunkServer(ipAddr, availMem);
  }

  void unregisterChunkServer(const std::string& ipAddr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregisterChunkServer(ipAddr);
    }
    ifaces_[i]->unregisterChunkServer(ipAddr);
  }

  bool heartBeat(const ChunkServerInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartBeat(info);
    }
    return ifaces_[i]->heartBeat(info);
  }

};

} // namespace

#endif
