/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChunkServer_TYPES_H
#define ChunkServer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace GFS {

typedef struct _ReadResult__isset {
  _ReadResult__isset() : buf(false), count(false) {}
  bool buf;
  bool count;
} _ReadResult__isset;

class ReadResult {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  ReadResult() : buf(), count(0) {
  }

  virtual ~ReadResult() throw() {}

  std::string buf;
  int32_t count;

  _ReadResult__isset __isset;

  void __set_buf(const std::string& val) {
    buf = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  bool operator == (const ReadResult & rhs) const
  {
    if (!(buf == rhs.buf))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const ReadResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReadResult &a, ReadResult &b);

} // namespace

#endif
